---
- name: Check software and update compliance against requirements
  hosts: all
  gather_facts: no
  vars_files:
    - "vars/{{ inventory_hostname }}_required_software.yml"

  vars:
    ansible_filter_plugins: "{{ playbook_dir }}/filter_plugins"
    remote_metrics_software_path: "C:\\metrics\\software_metrics.prom"
    remote_metrics_updates_path: "C:\\metrics\\windows_update_history.prom"
    remote_compliance_path: "C:\\metrics\\software_compliance.prom"
    remote_system_version_path: "C:\\metrics\\system_version.prom"
    local_metrics_dir: "/var/tmp/ans/ansible_metrics"
    system_patch_version: "1.2.3"

  tasks:
    - name: Create local metrics directory
      ansible.builtin.file:
        path: "{{ local_metrics_dir }}"
        state: directory
      delegate_to: localhost
      run_once: true

    # Check and transfer software metrics
    - name: Check if remote software metrics file exists
      ansible.windows.win_stat:
        path: "{{ remote_metrics_software_path }}"
      register: remote_software_metrics

    - name: Transfer software metrics file to controller
      ansible.builtin.win_shell: |
        Get-Content "{{ remote_metrics_software_path }}"
      register: software_metrics_content
      when: remote_software_metrics.stat.exists
      changed_when: false

    - name: Save transferred software metrics locally
      ansible.builtin.copy:
        content: "{{ software_metrics_content.stdout }}"
        dest: "{{ local_metrics_dir }}/software_metrics.prom"
        mode: '0644'
      delegate_to: localhost
      when: remote_software_metrics.stat.exists

    # Check and transfer update metrics
    - name: Check if remote update metrics file exists
      ansible.windows.win_stat:
        path: "{{ remote_metrics_updates_path }}"
      register: remote_update_metrics

    - name: Transfer update metrics file to controller
      ansible.builtin.win_shell: |
        Get-Content "{{ remote_metrics_updates_path }}"
      register: update_metrics_content
      when: remote_update_metrics.stat.exists
      changed_when: false

    - name: Save transferred update metrics locally
      ansible.builtin.copy:
        content: "{{ update_metrics_content.stdout }}"
        dest: "{{ local_metrics_dir }}/windows_update_history.prom"
        mode: '0644'
      delegate_to: localhost
      when: remote_update_metrics.stat.exists

    - name: Run software compliance check
      set_fact:
        software_compliance_results: >-
          {{ required_software | default([]) |
          check_compliance(
            metrics_content=software_metrics_content.stdout if remote_software_metrics.stat.exists else None,
            metrics_path=local_metrics_dir+'/software_metrics.prom' if remote_software_metrics.stat.exists else None,
            check_type='software'
          ) }}

    - name: Run update compliance check
      set_fact:
        update_compliance_results: >-
          {{ required_updates | default([]) |
          check_compliance(
            metrics_content=update_metrics_content.stdout if remote_update_metrics.stat.exists else None,
            metrics_path=local_metrics_dir+'/windows_update_history.prom' if remote_update_metrics.stat.exists else None,
            check_type='updates'
          ) }}

    # Generate combined results
    - name: Combine compliance results
      set_fact:
        combined_compliance_results: >-
          {{
            {
              'software': software_compliance_results,
              'updates': update_compliance_results,
              'timestamp': lookup('pipe', 'date -Iseconds'),
              'patch_version': system_patch_version
            }
          }}

    - name: Generate compliance metrics file on Windows host
      ansible.windows.win_template:
        src: templates/metrics_template.j2
        dest: "{{ remote_compliance_path }}"
      vars:
        software_results: "{{ combined_compliance_results.software.results }}"
        update_results: "{{ combined_compliance_results.updates.results }}"
        compliant_count: "{{ combined_compliance_results.software.counts.compliant }}"
        non_compliant_count: "{{ combined_compliance_results.software.counts.non_compliant }}"
        missing_count: "{{ combined_compliance_results.software.counts.missing }}"
        name_match_count: "{{ combined_compliance_results.software.counts.get('name_match', 0) }}"

    - name: Debug compliance status before version file generation
      debug:
        msg: |
          Software Compliance:
            Compliant: {{ software_compliance_results.counts.compliant }}
            Non-Compliant: {{ software_compliance_results.counts.non_compliant }}
            Missing: {{ software_compliance_results.counts.missing }}
          Update Compliance:
            Compliant: {{ update_compliance_results.counts.compliant }}
            Non-Compliant: {{ update_compliance_results.counts.non_compliant }}
            Missing: {{ update_compliance_results.counts.missing }}
          System Version File Will Be Generated: {{
            software_compliance_results.counts.non_compliant == 0 and
            software_compliance_results.counts.missing == 0 and
            software_compliance_results.counts.compliant > 0 and
            update_compliance_results.counts.non_compliant == 0 and
            update_compliance_results.counts.missing == 0 and
            update_compliance_results.counts.compliant > 0
          }}

    - name: Get timestamp from the system
      shell: "date +%s"
      register: timestamp
      delegate_to: localhost
      
    - name: Write system patch version when fully compliant
      ansible.windows.win_shell: |
        @"
        # HELP system_patch_version Current system patch version
        # TYPE system_patch_version gauge
        system_patch_version{version="{{ system_patch_version }}"} 1
        # HELP system_patch_version_date Timetamp of the date checked
        # TYPE system_patch_version_date gauge
        system_patch_version_date{timestamp=\"{{ timestamp.stdout }}\"} {{ timestamp.stdout }}        
        "@ | Out-File -FilePath "{{ remote_system_version_path }}" -Encoding utf8 -Force
      when: >
        software_compliance_results.counts.non_compliant == 0 and
        software_compliance_results.counts.missing == 0 and
        software_compliance_results.counts.compliant > 0 and
        update_compliance_results.counts.non_compliant == 0 and
        update_compliance_results.counts.missing == 0 and
        update_compliance_results.counts.compliant > 0
      args:
        executable: powershell

    - name: Write alternative output when not fully compliant
      ansible.windows.win_shell: |
        @"
        # HELP system_patch_version Current system patch version
        # TYPE system_patch_version gauge
        system_patch_version{version="Not Compliant"} 0
        # HELP system_patch_version_date Timetamp of the date checked
        # TYPE system_patch_version_date gauge
        system_patch_version_date{timestamp=\"{{ timestamp.stdout }}\"} {{ timestamp.stdout }}   
        "@ | Out-File -FilePath "{{ remote_system_version_path }}" -Encoding utf8 -Force
      when: >
        software_compliance_results.counts.non_compliant != 0 or
        software_compliance_results.counts.missing != 0 or
        software_compliance_results.counts.compliant == 0 or
        update_compliance_results.counts.non_compliant != 0 or
        update_compliance_results.counts.missing != 0 or
        update_compliance_results.counts.compliant == 0
      args:
        executable: powershell

    - name: Show version file generation status
      debug:
        msg: "System version file was generated: version={{ system_patch_version }}"
      when: >
        software_compliance_results.counts.non_compliant == 0 and
        software_compliance_results.counts.missing == 0 and
        software_compliance_results.counts.compliant > 0 and
        update_compliance_results.counts.non_compliant == 0 and
        update_compliance_results.counts.missing == 0 and
        update_compliance_results.counts.compliant > 0

    - name: Show compliance summary
      debug:
        msg: |
          Compliance Report - Generated at: {{ combined_compliance_results.timestamp }}

          SOFTWARE:
          Compliant: {{ combined_compliance_results.software.counts.compliant }}
          Non-Compliant: {{ combined_compliance_results.software.counts.non_compliant }}
          Missing: {{ combined_compliance_results.software.counts.missing }}
          Name Matches: {{ combined_compliance_results.software.counts.get('name_match', 0) }}

          UPDATES:
          Compliant: {{ combined_compliance_results.updates.counts.compliant }}
          Non-Compliant: {{ combined_compliance_results.updates.counts.non_compliant }}
          Missing: {{ combined_compliance_results.updates.counts.missing }}
