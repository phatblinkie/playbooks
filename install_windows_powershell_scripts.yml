---
  - name: Install powershell scripts to c:\scripts
    hosts: all
    gather_facts: yes
    vars:
      get_windows_updates_path: "C:\\scripts\\check_windows_updates.ps1"
      get_windows_updates_content: |
          # Windows Update Check Script
          # Created by Ansible - Do not modify manually

          $ErrorActionPreference = "Stop"

          # Get system information
          $hostname = $env:COMPUTERNAME
          $ipAddress = "{{ host_ip }}"
          $timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"

          # Human-readable output
          Write-Output "Windows Update Check Report"
          Write-Output "========================="
          Write-Output "Host: $hostname ($ipAddress)"
          Write-Output "Timestamp: $timestamp"
          Write-Output ""

          try {
              # Check for updates
              $session = New-Object -ComObject Microsoft.Update.Session
              $searcher = $session.CreateUpdateSearcher()
              $searchResult = $searcher.Search("IsInstalled=0 and Type='Software'")
              $updates = $searchResult.Updates
              $updateCount = $updates.Count

              # Human-readable output
              if ($updateCount -gt 0) {
                  Write-Output "Found $updateCount available updates:"
                  $updates | ForEach-Object {
                      $kb = if ($_.KBArticleIDs.Count -gt 0) { $_.KBArticleIDs[0] } else { "N/A" }
                      Write-Output " - $($_.Title) (KB$kb)"
                  }
              } else {
                  Write-Output "No updates available."
              }

              # Generate properly formatted metrics
              $metricsContent = @"
          # HELP windows_updates_available_count Number of available Windows updates
          # TYPE windows_updates_available_count gauge
          windows_updates_available_count{host="$hostname", ip="$ipAddress", timestamp="$timestamp"} $updateCount

          # HELP windows_update_available_info Information about available updates
          # TYPE windows_update_available_info gauge

          "@

              # Add update info metrics
              if ($updateCount -gt 0) {
                  $updates | ForEach-Object {
                      $kb = if ($_.KBArticleIDs.Count -gt 0) { $_.KBArticleIDs[0] } else { "N/A" }
                      $title = $_.Title -replace '"', "'" -replace '\n', ' ' -replace ',',''
                      $metricsContent += "windows_update_available_info{host=`"$hostname`", ip=`"$ipAddress`", kb=`"KB$kb`", title=`"$title`", timestamp=`"$timestamp`"} 1`n"
                  }
              }

              $metricsContent | Out-File -FilePath C:\metrics\updates_available.prom -Encoding utf8 -Force
              exit 0
          }
          catch {
              Write-Output "ERROR: $($_.Exception.Message)"
              @"
          # HELP windows_updates_available_count Number of available Windows updates
          # TYPE windows_updates_available_count gauge
          windows_updates_available_count{host="$hostname", ip="$ipAddress", timestamp="$timestamp"} -1

          # HELP windows_update_available_info Information about available updates
          # TYPE windows_update_available_info gauge
          windows_update_available_info{host="$hostname", ip="$ipAddress", error="$($_.Exception.Message -replace '"', "'")", timestamp="$timestamp"} 1
          "@ | Out-File -FilePath C:\metrics\updates_available.prom -Encoding utf8 -Force
              exit 1
          }

      get_installed_software_path: "C:\\scripts\\get_installed_software.ps1"
      get_installed_software_content: |
        $metricsDir = "C:\metrics"
        $outputFile = "$metricsDir\software_metrics.prom"

        # Create directory if needed
        if (-not (Test-Path -Path $metricsDir)) {
            New-Item -ItemType Directory -Path $metricsDir -Force | Out-Null
        }

        # Write single HELP/TYPE header
        @"
        # HELP windows_software_info Installed software information
        # TYPE windows_software_info gauge
        "@ | Out-File -FilePath $outputFile -Encoding utf8 -Force

        # Get all software entries and deduplicate
        Get-ItemProperty "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*",
                "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*" |
        Where-Object { $_.DisplayName -ne $null } |
        Group-Object DisplayName | ForEach-Object {
            # Select the entry with most complete information (prefer non-null version/publisher)
            $bestEntry = $_.Group | Sort-Object {
                [string]::IsNullOrEmpty($_.DisplayVersion) +
                [string]::IsNullOrEmpty($_.Publisher)
            } | Select-Object -First 1

            $name = $bestEntry.DisplayName -replace '"','\"' -replace '[\r\n]',' ' -replace ',',''
            $version = if ($bestEntry.DisplayVersion) {
                $bestEntry.DisplayVersion -replace '"','\"' -replace ',',''
            } else { "unknown" }
            $publisher = if ($bestEntry.Publisher) {
                $bestEntry.Publisher -replace '"','\"' -replace ',',''
            } else { "unknown" }

            "windows_software_info{displayname=`"$name`",version=`"$version`",publisher=`"$publisher`"} 1"
        } | Sort-Object | Add-Content -Path $outputFile -Encoding utf8

        # get the windows update history
        $Session = New-Object -ComObject "Microsoft.Update.Session"
        $Searcher = $Session.CreateUpdateSearcher()
        $historyCount = $Searcher.GetTotalHistoryCount()

        # Initialize output file
        @"
        # HELP windows_update_history Previous Windows Update events
        # TYPE windows_update_history gauge
        "@ | Set-Content -Path "C:\metrics\windows_update_history.prom" -Encoding UTF8

        # Group updates by KB + Title combination, keeping only the most recent
        $Searcher.QueryHistory(0, $historyCount) | Where-Object {$_.ResultCode -eq 2} |
        ForEach-Object {
            $status = "succeeded"  # Hardcoded since we're filtering for this
            $operation = switch($_.operation) {
                1 { "installation" }
                2 { "uninstallation" }
                3 { "other" }
                default { "unknown" }
            }

            # Extract KB number if present
            $kb = if ($_.title -match "KB\d{6,}") { $matches[0] } else { "none" }

            # Clean the title for Prometheus (preserve all content)
            $cleanTitle = $_.title -replace '"','\"' -replace '[\r\n]',' ' -replace '\s+',' ' -replace ',',''

            # Format the date consistently
            $date = $_.Date.ToString("yyyy-MM-ddTHH:mm:ssZ")

            # Write only successful updates to the file
            "windows_update_history{pc=`"$($env:computername)`",kb=`"$kb`",title=`"$cleanTitle`",operation=`"$operation`",status=`"$status`",date=`"$date`"} 1"
          } | Add-Content -Path "C:\metrics\windows_update_history.prom" -Encoding UTF8

        # Add summary metric
        $successCount = $Searcher.QueryHistory(0, $historyCount) | Where-Object { $_.ResultCode -eq 2 } | Measure-Object | Select-Object -ExpandProperty Count
        @"
        # HELP windows_update_success_count Count of successful Windows updates
        # TYPE windows_update_success_count gauge
        windows_update_success_count $successCount
        "@ | Add-Content -Path "C:\metrics\windows_update_history.prom" -Encoding UTF8

      create_scheduled_task_path: "C:\\scripts\\create_scheduled_task.ps1"
      create_scheduled_task_content: |

        # Run this script as Administrator

        # Configuration
        $scriptPath = "C:\scripts\get_installed_software.ps1"
        $taskName = "Export Installed Software"

        # Verify admin rights
        if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
            Write-Warning "Please run this script as Administrator"
            exit 1
        }

        # Create directories if missing
        if (-not (Test-Path -Path "C:\scripts")) {
            New-Item -ItemType Directory -Path "C:\scripts" -Force | Out-Null
        }

        if (-not (Test-Path -Path "C:\metrics")) {
            New-Item -ItemType Directory -Path "C:\metrics" -Force | Out-Null
        }

        # Create task action
        $action = New-ScheduledTaskAction `
            -Execute "powershell.exe" `
            -Argument "-NoProfile -ExecutionPolicy Bypass -File `"$scriptPath`""

        # Create task trigger (runs daily at 3 AM)
        $trigger = New-ScheduledTaskTrigger `
            -Daily `
            -At 3am

        # Configure task settings
        $settings = New-ScheduledTaskSettingsSet `
            -StartWhenAvailable `
            -DontStopOnIdleEnd `
            -AllowStartIfOnBatteries `
            -DontStopIfGoingOnBatteries

        # Create task principal (run as SYSTEM)
        $principal = New-ScheduledTaskPrincipal `
            -UserId "NT AUTHORITY\SYSTEM" `
            -LogonType ServiceAccount `
            -RunLevel Highest

        # Register the task
        try {
            Register-ScheduledTask `
                -TaskName $taskName `
                -Action $action `
                -Trigger $trigger `
                -Settings $settings `
                -Principal $principal `
                -Force

            Write-Host "Successfully created scheduled task '$taskName'" -ForegroundColor Green

            # Verify task creation
            $task = Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue
            if ($task) {
                Write-Host "Task configuration:"
                $task | Format-List *
            } else {
                Write-Warning "Task creation verification failed"
            }
        } catch {
            Write-Error "Failed to create task: $_"
            exit 1
        }

    tasks:
      - name: Check if inventory_hostname is an IP address
        set_fact:
          is_ip_address: "{{ inventory_hostname | regex_search('^\\d+\\.\\d+\\.\\d+\\.\\d+$') is not none }}"
        delegate_to: localhost

      - name: Resolve IP address on control node if not already an IP address
        shell: getent ahostsv4 {{ inventory_hostname }} | head -n 1 | awk '{print $1}'
        register: ip_lookup
        when: not is_ip_address
        delegate_to: localhost

      - name: Set IP address fact
        set_fact:
          host_ip: "{{ inventory_hostname if is_ip_address else ip_lookup.stdout.strip() }}"
        delegate_to: localhost

      - name: create needed directory C:\metrics
        ansible.windows.win_file:
          path: 'C:\metrics'
          state: directory

      - name: create needed directory C:\scripts
        ansible.windows.win_file:
          path: 'C:\scripts'
          state: directory

      - name: create software exporter powershell
        ansible.windows.win_copy:
          dest: "{{ get_installed_software_path }}"
          content: "{{ get_installed_software_content }}"
          force: yes
          encoding: utf-8

      - name: create scheduled task powershell
        ansible.windows.win_copy:
          dest: "{{ create_scheduled_task_path }}"
          content: "{{ create_scheduled_task_content }}"
          force: yes
          encoding: utf-8

      - name: create scheduled task powershell
        ansible.windows.win_copy:
          dest: "{{ get_windows_updates_path }}"
          content: "{{ get_windows_updates_content }}"
          force: yes
          encoding: utf-8

      - name: execute powershell scheduled task
        win_shell: "{{ create_scheduled_task_path }}"

      - name: execute powershell software export list
        win_shell: "{{ get_installed_software_path }}"

      - name: Execute Windows Update check script
        win_shell: |
          powershell.exe -ExecutionPolicy Bypass -File C:\scripts\check_windows_updates.ps1
        register: update_check

      - name: Display update check results
        debug:
          msg: "{{ update_check.stdout_lines | join('\n') }}"
