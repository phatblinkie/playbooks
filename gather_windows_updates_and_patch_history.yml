---
#- hosts: win_hosts
- hosts: all
  gather_facts: no
  tasks:
    - name: Check for updates on windows systems
      ansible.windows.win_updates:
        category_names:
          - CriticalUpdates
          - DefinitionUpdates
          - SecurityUpdates
          - Updates
        log_path: c:\ansible_wu-check.txt
        reboot: false
        reboot_timeout: 900
        state: searched
      register: update_result

    - name: Set default values for task_id and project_id if they are blank or null
      ansible.builtin.set_fact:
        task_id: "{{ awx_job_id }}"
        project_id: 2

    - name: Set other custom facts in result
      ansible.builtin.set_fact:
        combined_results: "{{ update_result | combine({'hostname': inventory_hostname, 'task_id': task_id, 'project_id': project_id}) }}"

#    - name: Display Results
#      ansible.builtin.debug:
#        msg:
#          - "Patching Check Status"
#          - "{{ combined_results }}"

    - name: Send facts to database
      ansible.builtin.uri:
#        url: "http://127.0.0.1/post/store_windows_patching_update.php"
        url: "http://172.21.184.27:8088/post/store_windows_patching_update_sqlite.php"
        method: POST
        body_format: json
        body: "{{ combined_results }}"
        headers:
          Content-Type: application/json
        status_code: 200
        return_content: True
      register: postoutput1
      delegate_to: localhost
      check_mode: no

    - name: Display db Post Status
      ansible.builtin.debug:
        msg:
          - "Patching Status"
          - "{{ postoutput1.status }}"

    - name: Get Windows Update History
      win_shell: |
        $Session = New-Object -ComObject "Microsoft.Update.Session";
        $Searcher = $Session.CreateUpdateSearcher();
        $historyCount = $Searcher.GetTotalHistoryCount();
        $Searcher.QueryHistory(0, $historyCount) | Select-Object @{
            name="Date"; expression={$_.Date.ToString("yyyy-MM-ddTHH:mm:ssZ")}
        }, @{
            name="Operation"; expression={switch($_.operation){
                1 {"Installation"}; 2 {"Uninstallation"}; 3 {"Other"}
            }}
        }, @{
            name="Status"; expression={switch($_.resultcode){
                1 {"In Progress"}; 2 {"Succeeded"}; 3 {"Succeeded With Errors"};
                4 {"Failed"}; 5 {"Aborted"}
            }}
        }, Title, @{
            name="KB"; expression={
                if ($_.title -match "KB\d{6,}") {
                    $_.title -replace ".*(KB\d{6,}).*", '$1'
                } else {
                    $null
                }
            }
        }, @{
            name="PC"; expression={$env:computername}
        } | ConvertTo-Json -Compress
      register: update_history

    - name: Prepare data for storage
      set_fact:
        combined_updates: {
          "update_history": "{{ update_history.stdout | from_json }}",
          "hostname": "{{ inventory_hostname }}",
          "project_id": "{{ project_id }}"
        }

    - name: Send historical data to database
      ansible.builtin.uri:
#        url: "http://127.0.0.1/post/store_windows_update_datanew.php"
        url: "http://172.21.184.27:8088/post/store_windows_update_datanew_sqlite.php"
        method: POST
        body_format: json
        body: "{{ combined_updates }}"
        headers:
          Content-Type: application/json
        status_code: 200
        return_content: True
      register: postoutput
      delegate_to: localhost
      check_mode: no
